# File dropped by Chef.  Will be overwritten on the next chef run.  Changes need to be done in Chef.

base_path = File.absolute_path(File.join(File.dirname(__FILE__), '../', '../'))
application_name = application_name = base_path.split('/').last
current_path = base_path + '/current'
shared_path = base_path + '/shared'
shared_bundler_gems_path = shared_path + '/bundled_gems'

number_of_workers = <%= @number_of_workers %>

working_directory current_path

worker_processes number_of_workers

listen "<%= @unicorn_socket %>", backlog: 1024

timeout(ENV['UNICORN_TIMEOUT'].to_i > 0 ? ENV['UNICORN_TIMEOUT'].to_i : 180)

pid "<%= @pid_file %>"

logger Logger.new('log/unicorn.log')

stderr_path 'log/unicorn.stderr.log'
stdout_path 'log/unicorn.stdout.log'

preload_app true

if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end

before_fork do |server, worker|
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end

  old_pid = "#{server.config[:pid]}.oldbin"

  if File.exists?(old_pid) && server.pid != old_pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :TERM : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
  sleep 1
end

if defined?(Bundler.settings)
  before_exec do |server|
    paths = (ENV['PATH'] || '').split(File::PATH_SEPARATOR)
    paths.unshift "#{shared_bundler_gems_path}/bin"
    ENV['PATH'] = paths.uniq.join(File::PATH_SEPARATOR)

    ENV['GEM_HOME'] = ENV['GEM_PATH'] = shared_bundler_gems_path
    ENV['BUNDLE_GEMFILE'] = "#{current_path}/Gemfile"
  end
end

after_fork do |server, worker|
  <% if @semantic_logger %>
  # Re-open appenders after forking the process
  SemanticLogger.reopen
  <% end %>
  worker_pid = File.join(File.dirname(server.config[:pid]), "unicorn_worker_#{application_name}_#{worker.nr}.pid")
  File.open(worker_pid, 'w') { |f| f.puts Process.pid }
  if defined?(ActiveRecord::Base)
    if defined?(Sinatra) && !(defined?(Rails) || defined?(Rails::Initializer)) # Check for Sinatra without Rails 3 or 2.3
      require 'erb'
      yaml_file = File.join(Sinatra::Application.root || current_path, 'config', 'database.yml')
      if yaml_file
        db_options = YAML::safe_load(ERB.new(IO.read(yaml_file)).result)
        ActiveRecord::Base.establish_connection(db_options[ENV['RACK_ENV']])
      end
    else
      ActiveRecord::Base.establish_connection
    end
  end
end
